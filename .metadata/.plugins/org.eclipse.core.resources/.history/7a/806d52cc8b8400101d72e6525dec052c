package uniandes.dpoo.estructuras.logica;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

/**
 * Esta clase tiene un conjunto de métodos para practicar operaciones sobre listas de enteros y de cadenas.
 *
 * Todos los métodos deben operar sobre los atributos listaEnteros y listaCadenas.
 * 
 * No pueden agregarse nuevos atributos
 * 
 * Implemente los métodos usando operaciones sobre listas (ie., no haga cosas como construir arreglos para evitar la manipulación de listas).
 * 
 * Intente usar varias formas de recorrer las listas (while, for, for each, iteradores ... )
 */
public class SandboxListas
{
    /**
     * Una lista de enteros para realizar varias de las siguientes operaciones.
     */
    private List<Integer> listaEnteros;

    /**
     * Una lista de cadenas para realizar varias de las siguientes operaciones
     */
    private List<String> listaCadenas;

    /**
     * Crea una nueva instancia de la clase con las dos listas inicializadas pero vacías
     */
    public SandboxListas( )
    {
        listaEnteros = new ArrayList<Integer>( );
        listaCadenas = new LinkedList<String>( );
    }

    /**
     * Retorna una copia de la lista de enteros, es decir una nueva lista del mismo tamaño que contiene copias de los valores de la lista original
     * @return Una copia de la lista de enteros
     */
    public List<Integer> getCopiaEnteros( )
    {
    	//Creamos un nuevo arraylist, a partir de List
    	List<Integer> copia = new ArrayList<>(); 
    	//Agregamos elementos
    	for(int entero: listaEnteros) {
    		copia.addLast(entero);
    	}
        return copia;
    }

    /**
     * Retorna una copia de la lista de cadenas, es decir una nueva lista del mismo tamaño que contiene copias de los valores de la lista original
     * @return Una copia de la lista de cadenas
     */
    public List<String> getCopiaCadenas( )
    {
    	//Creamos una lista de cadenas de tipo single linked
    	List<String> copia_cadenas = new LinkedList<>();
    	//aumentos
    	int i = 0;
    	while(i<listaCadenas.size()) {
    		//se agrega al final la cadena i de listaCadenas
    		copia_cadenas.addLast(listaCadenas.get(i));
    		i++;
    	}
        return copia_cadenas;
    }

    /**
     * Retorna un arreglo con los valores de la lista de enteros, es decir un arreglo del mismo tamaño que contiene copias de los valores de la lista
     * @return Una arreglo de enteros
     */
    public int[] getEnterosComoArreglo( )
    {
    	int[] arreglo = new int[listaEnteros.size()];
    	for(int i = 0; i<listaEnteros.size(); i++) {
    		arreglo[i] = listaEnteros.get(i);
    	}
        return arreglo;
    }
    /**
     * Retorna la cantidad de valores en la lista de enteros
     * @return
     */
    public int getCantidadEnteros( )
    {
        return listaEnteros.size();
    }

    /**
     * Retorna la cantidad de valores en la lista de cadenas
     * @return
     */
    public int getCantidadCadenas( )
    {
        return listaCadenas.size();
    }

    /**
     * Agrega un nuevo valor al final de la lista de enteros. Es decir que este método siempre debería aumentar en 1 el tamaño de la lista.
     * 
     * @param entero El valor que se va a agregar.
     */
    public void agregarEntero( int entero )
    {
    	listaEnteros.addLast(entero);

    }

    /**
     * Agrega un nuevo valor al final de la lista de cadenas. Es decir que este método siempre debería aumentar en 1 la capacidad de la lista.
     * 
     * @param cadena La cadena que se va a agregar.
     */
    public void agregarCadena( String cadena )
    {
    	listaCadenas.addLast(cadena);

    }

    /**
     * Elimina todas las apariciones de un determinado valor dentro de la lista de enteros
     * @param valor El valor que se va eliminar
     */
    public void eliminarEntero( int valor )
    {
    	//Podemos utilizar un Iterador
    	//El cual es una forma de recorrer cualquier estructura que esté bajo Collection
    	// tiene dos métodos:.hasNext()que sirve para saber si acabamos
    	// Y next() que sirve para ir al siguiente
    	
    	//Definir al iterador
    	Iterator<Integer> iterador = listaEnteros.iterator(); //para esto tenemos que importar la clase de Iterator
    	//Hacer un while atado a que ese iterador .hastNext
    	while(iterador.hasNext()) {
    		//Obtener el numero en la siguiente posicion
    		Integer entero = iterador.next();
    		//Y listo, el siguiente .next() irá al siguiente número, previo aprobamiento de hasNext
    		
    		//Ahora que tenemos el entero, toca compararlo con el valor
    		//Hacemos iterador.remove() para no tener errores
    		if (valor == entero) {
    			iterador.remove();
    		}
    	}
    }

    /**
     * Elimina todas las apariciones de un determinado valor dentro de la lista de cadenas
     * @param cadena La cadena que se va eliminar
     */
    public void eliminarCadena( String cadena )
    {
    	//Estos metodos de eliminar, lo mejor es con iterator
    	//Creamos el iterador de la lista de strings
    	Iterator<String> iterador_de_strings = listaCadenas.iterator();
    	
    	//Recorremos usando hasNext
    	while(iterador_de_strings.hasNext()) {
    		//Agarramos al elemento con next
    		String cad = iterador_de_strings.next();
    		//comparamos con .equals
    		if (cad.equals(cadena)){
    			//removemos con .remove
    			iterador_de_strings.remove();
    		}
    	}

    }

    /**
     * Inserta un nuevo entero en la lista de enteros
     * 
     * @param entero El nuevo valor que debe agregarse
     * @param posicion La posición donde debe quedar el nuevo valor en la lista aumentada. Si la posición es menor a 0, se inserta el valor en la primera posición. Si la
     *        posición es mayor que el tamaño de la lista, se inserta el valor en la última posición.
     */
    public void insertarEntero( int entero, int posicion )
    {
    	if (posicion<0) {
    		listaEnteros.addFirst(entero);
    	}
    	else if (posicion >listaEnteros.size()) {
    		listaEnteros.addLast(entero);
    	}
    	else {
    		listaEnteros.add(posicion, entero);
    	}

    }

    /**
     * Elimina un valor de la lista de enteros dada su posición.
     * @param posicion La posición donde está el elemento que debe ser eliminado. Si el parámetro posicion no corresponde a ninguna posición de la lista de enteros, el método
     *        no debe hacer nada.
     */
    public void eliminarEnteroPorPosicion( int posicion )
    {
    	if(0<=posicion && posicion<listaEnteros.size()) {
    		//usamos remove para quitar en una posicion especificar
    		//si toca eliminar varias, lo mejor es con un iterador
    		listaEnteros.remove(posicion);
    	}

    }

    /**
     * Reinicia la lista de enteros con los valores contenidos en el parámetro 'valores', pero truncados.
     * 
     * Es decir que si el valor fuera 3.67, en la nueva lista debería quedar el entero 3.
     * @param valores Un arreglo de valores decimales.
     */
    public void reiniciarArregloEnteros( double[] valores )
    {
    	//Esto lo podemos hacer con un while
    	int i = 0;
    	int tamanio = valores.length();
    	while(i<tamanio) {
    		listaEnteros.add(i, (int) valores[i]); //toca convertir de double en valores[i] a int, eso se llama truncar, quitar la parte decimal. 
    		i++;
    	}
    }

    /**
     * Reinicia la lista de cadenas con las representaciones como Strings de los objetos contenidos en la lista del parámetro 'objetos'.
     * 
     * Use el método toString para convertir los objetos a cadenas.
     * @param valores Una lista de objetos
     */
    public void reiniciarArregloCadenas( List<Object> objetos )
    {
    	//esto lo podemos hacer con un for
    	int tamanio = listaCadenas.size();
    	for(int i = 0; i<tamanio;i++) {
    		//en la posicion i agregamos a un obejto a al listaCadenas
    		//Este objeto es una posicion en la lista i de objetos
    		//El cual convertimos a String
    		listaCadenas.add(i, objetos.get(i).toString());
    	}

    }

    /**
     * Modifica la lista de enteros para que todos los valores sean positivos.
     * 
     * Es decir que si en una posición había un valor negativo, después de ejecutar el método debe quedar el mismo valor muliplicado por -1.
     */
    public void volverPositivos( )
    {
    	//Para esto es que se usan los iteradores, para hacerlo distinto usemos un iterador de lista
    	
    	//Creamos al iterador de ListIterator ya que este tiene .set, que modifica a la estructura
    	//Con el iterator normal solo se puede recorrer y eliminar, nada de agregar o modificar de valor
    	ListIterator<Integer> iterador = listaEnteros.listIterator();
    	while(iterador.hasNext()) {
    		//tomamos el elemento
    		int elemento = iterador.next();
    		//si es negativo
    		if (elemento<0) {
    			//su nuevo valor será positivo: lo multiplicamos por -1
    			iterador.set((-1)*elemento);
    		}
    	}
    }

    /**
     * Modifica la lista de enteros para que todos los valores queden organizados de MAYOR a MENOR.
     */
    public void organizarEnteros( )
    {
    	//Podemos utilizar Collections.reverseOrder() que es un método de una clase super grande 
    	//Luego, bajo ese reverseOrder, es que decidimos arreglarlo
    	listaEnteros.sort(Collections.reverseOrder());

    }

    /**
     * Modifica la lista de cadenas para que todos los valores queden organizados lexicográficamente.
     */
    public void organizarCadenas( )
    {
    	//Como es lexicografico es de menor a mayor, entonces es el orden natural
    	//Como es el orden natural, se pasa de parametro null
    	listaCadenas.sort(null);

    }

    /**
     * Cuenta cuántas veces aparece el valor recibido por parámetro en la lista de enteros
     * @param valor El valor buscado
     * @return La cantidad de veces que aparece el valor
     */
    public int contarApariciones( int valor )
    {
    	int contador = 0;
    	//podemos usar un iterador
    	Iterator<Integer> iter = listaEnteros.iterator();
    	while(iter.hasNext()) {
    		int elemento = iter.next();
    		if (valor == elemento) {
    		contador++;
    		}
    	}
        return contador;
    }

    /**
     * Cuenta cuántas veces aparece la cadena recibida por parámetro en la lista de cadenas.
     * 
     * La búsqueda no debe diferenciar entre mayúsculas y minúsculas.
     * @param cadena La cadena buscada
     * @return La cantidad de veces que aparece la cadena
     */
    public int contarApariciones( String cadena )
    {
    	int veces = 0;
    	//Usamos un iterador, en for
    	for(Iterator<String> iterador_str = listaCadenas.iterator(); iterador_str.hasNext();) {
    		//obtenemos la cadena
    		String cad = iterador_str.next();
    		//comparamos sin importar mayus o minus
    		if(cad.equalsIgnoreCase(cadena)) {
    			veces++;
    		}
    	}
        return veces;
    }

    /**
     * Cuenta cuántos valores dentro de la lista de enteros están repetidos.
     * @return La cantidad de enteos diferentes que aparecen más de una vez
     */
    public int contarEnterosRepetidos( )
    {
    	//Podemos hacer esto con un mapa y un número de apariciones
        Map<Integer, Integer> mapa_cuentas = new HashMap<>();
    	int repeticiones = 0;
    	
    	//Utilizamos un iterador para recorrer la lista
    	Iterator<Integer> iter = listaEnteros.iterator();
        while(iter.hasNext()) {
        	//tomamos al elemento
        	int elemento = iter.next();
        	//los agregamos al mapa con valor de 0 + 1 si no existe
        	//o modificamos la llave sumandole 1
        	mapa_cuentas.put(elemento, mapa_cuentas.getOrDefault(elemento, 0) + 1); //getOrDefault sirve para tomar al valor asociado al elemento y en caso de no encontrarlo retornar 0
        }
        //Una vez ya tenemos el mapa podemos recorrer sus valores, guardandalodo en una variable de tipo collection pues ese es el tipo que retorna
        Collection<Integer> listado = mapa_cuentas.values();
        //Esta lista de valores tiene el número que se repetió cada llave,luego viendo cuáles son mayores a 2 ya sabemos que aparecieorn 2 veces
        for(int cada_elemento : listado) {
        	if (cada_elemento>=2) {
        		repeticiones++;
        	}
        }
        return repeticiones;
    }

    /**
     * Compara la lista de enteros con un arreglo de enteros y verifica si contienen los mismos elementos exactamente en el mismo orden.
     * @param otroArreglo El arreglo de enteros con el que se debe comparar
     * @return True si los elementos son los mismos y en el mismo orden y false de lo contrario
     */
    public boolean compararArregloEnteros( int[] otroArreglo )
    {
    	//Podemos hacer esto con un while
    	int i = 0;
    	//esto lo hacemos para no obtener errores de outofrange
    	int tamanio_min = Math.min(otroArreglo.length, listaEnteros.size());
    	
    	//suponemos que sí son iguales, nuestro objetivo será recorrer toda la lista para ver si eso sigue siendo asi
    	boolean iguales = true;
    	//o se nos acaban los números o dejan de ser iguales
    	while(i<tamanio_min && iguales == true) {
    		//agarramos los elementos a comparar
    		int elemento_arreglo = otroArreglo[i];
    		int elemento_lista = listaEnteros.get(i);
    		//si son distintos entonces ya no son iguales y se acaba el ciclo
    		if(elemento_arreglo != elemento_lista) {
    			iguales = false;
    		}
    		i++;
    	}
    	
        return iguales;
    }

    /**
     * Cambia los elementos de la lista de enteros por una nueva serie de valores generada de forma aleatoria.
     * 
     * Para generar los valores se debe partir de una distribución uniforme usando Math.random().
     * 
     * Los números en la lista deben quedar entre el valor mínimo y el máximo.
     * @param cantidad La cantidad de elementos que debe haber en la lista
     * @param minimo El valor mínimo para los números generados
     * @param maximo El valor máximo para los números generados
     */
    public void generarEnteros( int cantidad, int minimo, int maximo )
    {
    	int cambios_hechos = 0; //variable para saber cuantos cambios ya hemos hecho
    	//para esto podemos usar un iterador
    	ListIterator<Integer> iterador = listaEnteros.listIterator();
    	while(iterador.hasNext()) {
    		int elemento =iterador.next();    			
    		if(cambios_hechos<cantidad) {
    			iterador.set((int)(Math.random() * (maximo - minimo + 1)) + minimo);//Formula para hallar un entero entre dos numeros 			
    		}
    	}
    }

}
