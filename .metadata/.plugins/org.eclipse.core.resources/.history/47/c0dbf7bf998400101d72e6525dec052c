package uniandes.dpoo.estructuras.logica;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Esta clase tiene un conjunto de métodos para practicar operaciones sobre mapas.
 *
 * Todos los métodos deben operar sobre el atributo mapaCadenas que se declara como un Map.
 * 
 * En este mapa, las llaves serán cadenas y los valores serán también cadenas. La relación entre los dos será que cada llave será igual a la cadena del valor, pero invertida.
 * 
 * El objetivo de usar el tipo Map es que sólo puedan usarse métodos de esa interfaz y no métodos adicionales provistos por la implementación concreta (HashMap).
 * 
 * No pueden agregarse nuevos atributos.
 */
public class SandboxMapas
{
    /**
     * Un mapa de cadenas para realizar varias de las siguientes operaciones.
     * 
     * Las llaves del mapa son cadenas, así como los valores.
     * 
     * Las llaves corresponden a invertir la cadena que aparece asociada a cada llave.
     */
    private Map<String, String> mapaCadenas;

    /**
     * Crea una nueva instancia de la clase con las dos listas inicializadas pero vacías
     */
    public SandboxMapas( )
    {
        mapaCadenas = new HashMap<String, String>( );
    }

    /**
     * Retorna una lista con las cadenas del mapa (los valores) ordenadas lexicográficamente
     * @return Una lista ordenada con las cadenas que conforman los valores del mapa
     */
    public List<String> getValoresComoLista( )
    {
    	//Podemos crear una nueva lista de tipo array list con lo que retorna los valores del mapa, de tipo collection
        List<String> listado = new ArrayList<>(mapaCadenas.values());
        
        //Ahora obtenemos una lista pero no necesariamente ordenada lexicograficamente
        //Para ordenarla, usamos .sort(), ya incorporado por ser de Collection y null para que sea de menor a mayor (lexicograficamente)
        listado.sort(null);
        return listado;
    }

    /**
     * Retorna una lista con las llaves del mapa ordenadas lexicográficamente de mayor a menor
     * @return Una lista ordenada con las cadenas que conforman las llaves del mapa
     */
    public List<String> getLlavesComoListaInvertida( )
    {
    	//Para este ejemplo podemos hacer lo mismo:
    	//Crear una lista de tipo List<String> (porque las llaves son Strings)
    	//Y que tenga la implementacion ArrayList
    	List<String> listado_llaves = new ArrayList<>(mapaCadenas.keySet());
    	//Solo que Map retorna un keySet (un conjunto) y no una lista
    	//Luego, lo ordenamos de menor a mayor, (lexicografico-alfabetico) con sort :
    	Collections.sort(listado_llaves);
    	//Una vez ya está ordenada, es que se puede aplicar reverse para invertir el orden, entonces queda de mayor a menor:
    	Collections.reverse(listado_llaves);
        return listado_llaves;
    }

    /**
     * Retorna la cadena que sea lexicográficamente menor dentro de las llaves del mapa .
     * 
     * Si el mapa está vacío, debe retornar null.
     * @return
     */
    public String getPrimera( )
    {
    	//Obtenemos la lista de llaves ordenadas de mayor a menor de la anterior
    	List<String> listado_llaves = getLlavesComoListaInvertida();
    	String primer_elemento = null;
    	if(!listado_llaves.isEmpty()) { //En caso que NO (!) esté vacío
        	primer_elemento = listado_llaves.getLast();	
    	}
        return primer_elemento;
    }

    /**
     * Retorna la cadena que sea lexicográficamente mayor dentro de los valores del mapa
     * 
     * Si el conjunto está vacío, debe retornar null.
     * @return
     */
    public String getUltima( )
    {
    	//Obtenemos la lista de llaves ordenadas de mayor a menor de la anterior
    	List<String> listado_llaves = getLlavesComoListaInvertida();
    	String ultimo_elemento = null;
    	if(!listado_llaves.isEmpty()) { //En caso que NO (!) esté vacío
    		ultimo_elemento = listado_llaves.getFirst();	
    	}
        return ultimo_elemento;
    }

    /**
     * Retorna una colección con las llaves del mapa, convertidas a mayúsculas.
     * 
     * El orden de las llaves retornadas no importa.
     * @return Una lista de cadenas donde todas las cadenas están en mayúsculas
     */
    public Collection<String> getLlaves( )
    {
    	//Obtenemos una lista de llaves
    	List<String> listado_llaves = getLlavesComoListaInvertida();
    	//Creamos otra vacia
        List<String> llaves_mayus = new ArrayList<>();

    	//Cambiamos por mayúsculas y agregamos
    	for(String llave:listado_llaves) {
            llaves_mayus.add(llave.toUpperCase());
    	}    	
        return llaves_mayus;
    }

    /**
     * Retorna la cantidad de *valores* diferentes en el mapa
     * @return
     */
    public int getCantidadCadenasDiferentes( )
    {
    	//Creamos una lista con los valores
    	List<String> valores = getValoresComoLista();
    	//Creamos otra lista para guardar a los unicos
    	List<String> unicos = new ArrayList<String>();
    	//Guardamos solo los unicos
    	for(String valor : valores) {
    		if(unicos.contains(valor)==false) {
    			unicos.add(valor);
    		}
    	}
        return unicos.size(); //retornamos el tamaño de la lista de unicos
    }

    /**
     * Agrega un nuevo valor al mapa de cadenas: el valor será el recibido por parámetro, y la llave será la cadena invertida
     * 
     * Este método podría o no aumentar el tamaño del mapa, dependiendo de si ya existía la cadena en el mapa
     * 
     * @param cadena La cadena que se va a agregar al mapa
     */
    public void agregarCadena( String cadena )
    {
    	String invertido = "";
    	for(int i = cadena.length()-1; i>=0;i--) {
    		invertido+=cadena.charAt(i); //esto se encarga de asignarle a invertido el valor anterior más el caracter que se encunetra en la posicion i del string
    	}
    	mapaCadenas.put(invertido, cadena);

    }

    /**
     * Elimina una cadena del mapa, dada la llave
     * @param cadena La llave para identificar el valor que se debe eliminar
     */
    public void eliminarCadenaConLLave( String llave )
    {
    	//utilizamos el metodo .remove() para quitar la llave, sin importarnos el valor especifico que pueda tener asociado
    	mapaCadenas.remove(llave);

    }

    /**
     * Elimina una cadena del mapa, dado el valor
     * @param cadena El valor que se debe eliminar
     */
    public void eliminarCadenaConValor( String valor )
    {
    	//Podemos saber a qué llave le corresponde este valor al invertir el valor: esa sera su llave
    	String llave = "";
    	for(int i = valor.length()-1; i>=0;i--) {
    		llave+=valor.charAt(i); //esto se encarga de asignarle a llave el valor anterior más el caracter que se encunetra en la posicion i del string
    	}
    	mapaCadenas.remove(llave);

    }

    /**
     * Reinicia el mapa de cadenas con las representaciones como Strings de los objetos contenidos en la lista del parámetro 'objetos'.
     * 
     * Use el método toString para convertir los objetos a cadenas.
     * @param valores Una lista de objetos
     */
    public void reiniciarMapaCadenas( List<Object> objetos )
    {
    	//Reiniciamos el mapa desde cero
        mapaCadenas = new HashMap<String, String>( );
        //Vamos haciendo put de todo con el metodo agregarcadena
        for(Object objeto : objetos) {
        	agregarCadena(objeto.toString());
        }


    }

    /**
     * Modifica el mapa de cadenas reemplazando las llaves para que ahora todas estén en mayúsculas pero sigan conservando las mismas cadenas asociadas.
     */
    public void volverMayusculas( )
    {
    	//Podemos crear un nuevo mapa
    	Map<String, String> nuevo = new HashMap<String, String>();
    	//Asignarle lo mismo que al otro solo que con otras llaves
    	//Lo anterior, apartir de entrySet
    	//Recordemos que no pueden ser dos listas de llaves y de valores
    	//Pues en las listas no hay orden, entonces no se sabe si en la lista de llaves i, se corresponda con la lista de valores i
    	//Por tanto, debemos usar entrySet()

        for (Map.Entry<String, String> entrada : mapaCadenas.entrySet()) {
            nuevo.put(entrada.getKey().toUpperCase(), entrada.getValue());
        }

        mapaCadenas = nuevo;
    	

    }

    /**
     * Verifica si todos los elementos en el arreglo de cadenas del parámetro hacen parte del mapa de cadenas (de los valores)
     * @param otroArreglo El arreglo de enteros con el que se debe comparar
     * @return True si todos los elementos del arreglo están dentro de los valores del mapa
     */
    public boolean compararValores( String[] otroArreglo )
    {
    	//Podemos tener una lista de valores:
    	List<String> listado_valores = new ArrayList<>(mapaCadenas.values());
    	
    	//Y compararlas
    	boolean son_iguales = true;
    	System.out.println(listado_valores.toString());
    	System.out.println(Arrays.toString(otroArreglo));
    	
		int i = 0;
		int maximo = Math.max(listado_valores.size(),otroArreglo.length);
		
		while(i<maximo && son_iguales == true) {
		String elemento_otro_arreglo = otroArreglo[i];
		if(listado_valores.contains(elemento_otro_arreglo)== false) {
			son_iguales = false;
		}
		i++;
		System.out.println(elemento_otro_arreglo.toString());
		}
    		

    	
        return son_iguales;
    }

}
